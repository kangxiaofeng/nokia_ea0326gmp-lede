name: 编译 LEDE 固件

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        
    - name: 检查初始空间
      run: |
        echo "======================="
        echo "初始空间使用情况："
        echo "======================="
        df -h

    - name: 清理系统空间
      run: |
        sudo apt-get clean
        sudo apt-get autoremove -y
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /opt/microsoft
        sudo rm -rf /opt/pipx
        sudo rm -rf /usr/share/swift
        echo "======================="
        echo "清理后空间使用情况："
        echo "======================="
        df -h
        
    - name: 安装依赖
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
          gettext genisoimage git gperf help2man intltool libc6-dev-i386 libelf-dev \
          libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev jq zstd libzstd-dev

    - name: 设置编译环境
      run: |
        rm -rf lede
        git clone https://github.com/coolsnowwolf/lede.git
        cd lede
        ccache -M 15G
        echo 'CONFIG_CCACHE=y' >> .config
        echo 'CONFIG_CCACHE_DIR="/tmp/ccache"' >> .config
        echo 'CONFIG_CCACHE_BIN="/usr/bin/ccache"' >> .config
        echo 'CONFIG_BUILDBOT=y' >> .config
        echo 'CONFIG_SINGLE_IMAGE_FILESYSTEM=y' >> .config
        echo 'CONFIG_TARGET_ROOTFS_SQUASHFS=y' >> .config
        echo 'CONFIG_TARGET_IMAGES_GZIP=y' >> .config
        echo 'CONFIG_TARGET_OPTIMIZATION="-Os -pipe"' >> .config
        echo 'CONFIG_TARGET_OPTIMIZATION_FOR_SIZE=y' >> .config
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 复制配置文件
      run: |
        cp .config lede/
        
    - name: 编译固件
      id: compile
      run: |
        cd lede
        make defconfig
        ulimit -v 6000000  # 限制虚拟内存使用为 6GB
        make -j$(($(nproc) + 1)) V=s
        if [ $? -ne 0 ]; then
          echo "编译失败"
          exit 1
        fi
        
    - name: 验证固件文件
      run: |
        cd lede
        echo "检查固件文件是否存在："
        ls -l bin/targets/*/*/*.bin || true
        if [ ! -d "bin/targets" ]; then
          echo "错误：固件目录不存在"
          exit 1
        fi
        if ! ls bin/targets/*/*/*.bin 1> /dev/null 2>&1; then
          echo "错误：未找到任何固件文件"
          exit 1
        fi
        
    - name: 生成构建信息
      id: buildinfo
      run: |
        echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV
        echo "BUILD_TAG=$(TZ='Asia/Shanghai' date +'%Y%m%d')" >> $GITHUB_ENV
        echo "GIT_REV=$(git -C lede rev-parse --short HEAD)" >> $GITHUB_ENV
        
    - name: 上传到 Release
      if: ${{ steps.compile.outcome == 'success' }}
      uses: ncipollo/release-action@v1
      with:
        tag: OpenWrt_nokia_ea0326gmp_${{ env.BUILD_TAG }}
        artifacts: "lede/bin/targets/*/*/*.bin"      # 匹配所有固件文件
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ### 基于 Lean 的 LEDE 源码构建
          **首次使用建议全新刷写**
          
          **基本信息**
          - 管理 IP: 192.168.1.1
          - 用户名: root
          - 密码: password
          - 设备型号: nokia_ea0326gmp
          
          **固件说明**
          - `*-initramfs-kernel.bin`: 完整系统镜像，适合首次刷机或系统恢复
          - `*-squashfs-sysupgrade.bin`: 系统升级包，适合日常更新（保留配置）
          
          **使用建议**
          - 首次刷机：使用 initramfs 版本
          - 系统升级：使用 sysupgrade 版本
          - 系统变砖：使用 initramfs 版本恢复
          
          **构建信息**
          - 构建日期: ${{ env.BUILD_DATE }}
          - 源码版本: ${{ env.GIT_REV }} 
