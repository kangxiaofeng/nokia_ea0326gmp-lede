name: Build LEDE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
    - name: Display disk space before checkout
      run: |
        echo "磁盘空间信息 (checkout 前):"
        df -h
        du -sh ~/*

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Display disk space after checkout
      run: |
        echo "磁盘空间信息 (checkout 后):"
        df -h
        du -sh ~/*

    - name: Display disk space before cache restore
      run: |
        echo "磁盘空间信息 (缓存恢复前):"
        df -h
        du -sh ~/*

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          /mnt/lede/ccache  # 将缓存移动到/mnt分区
          /mnt/lede/dl      # 将下载的源码包移动到/mnt分区
        key: ${{ runner.os }}-lede-${{ hashFiles('.config') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-lede-${{ hashFiles('.config') }}-

    - name: Display disk space after cache restore
      run: |
        echo "磁盘空间信息 (缓存恢复后):"
        df -h
        du -sh ~/*

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
          gettext genisoimage git gperf help2man intltool libc6-dev-i386 libelf-dev \
          libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev jq zstd libzstd-dev
        
        # 清理 apt 缓存以节省空间
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    - name: Display disk space after dependencies install
      run: |
        echo "磁盘空间信息 (依赖安装后):"
        df -h
        du -sh ~/*

    - name: Prepare build environment on /mnt
      run: |
        # 创建/mnt上的编译目录
        sudo mkdir -p /mnt/lede
        sudo chown runner:runner /mnt/lede
        
        # 克隆源码到/mnt分区
        git clone https://github.com/coolsnowwolf/lede.git /mnt/lede
        cd /mnt/lede
        
        # 更新feeds并安装
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 复制配置文件
        cp $GITHUB_WORKSPACE/.config .
        
        # 生成默认配置
        make defconfig

    - name: Display disk space before compilation
      run: |
        echo "磁盘空间信息 (编译前):"
        df -h
        du -sh ~/*
        du -sh /mnt/*

    - name: Compile LEDE with disk space optimization
      id: compile
      run: |
        cd /mnt/lede
        
        # 配置ccache并限制大小
        echo "export USE_CCACHE=1" >> ~/.bashrc
        echo "export CCACHE_MAXSIZE=150M" >> ~/.bashrc  # 进一步减小ccache
        echo "export CCACHE_DIR=$(pwd)/ccache" >> ~/.bashrc
        source ~/.bashrc
        ccache -z
        
        # 将临时文件目录指向/mnt（空间更充足）
        mkdir -p /mnt/temp
        export TMPDIR=/mnt/temp
        
        # 编译过程中定期清理临时文件
        mkdir -p /mnt/temp_dir
        
        # 使用更保守的并行编译参数
        make -j$(nproc) V=s || (
          echo "Compilation failed, trying with reduced parallelism and cleaning up..."
          # 清理临时文件
          find . -name "*.o" -exec rm -f {} \;
          find . -name "*.d" -exec rm -f {} \;
          make -j1 V=s
        )
        
        # 更激进的清理（仅保留必要的固件文件）
        make clean
        make dirclean
        
        # 创建最终输出目录
        mkdir -p $GITHUB_WORKSPACE/firmware
        
        # 复制固件文件到工作区
        cp bin/targets/*/*/*.bin $GITHUB_WORKSPACE/firmware/
        cp bin/targets/*/*/*.img.gz $GITHUB_WORKSPACE/firmware/
        
        # 显示ccache统计信息和磁盘使用情况
        ccache -s

    - name: Display disk space after compilation
      run: |
        echo "磁盘空间信息 (编译后):"
        df -h
        du -sh ~/*
        du -sh /mnt/*

    - name: Collect firmware files
      if: success() || failure()
      run: |
        ls -la $GITHUB_WORKSPACE/firmware/
        echo "固件文件数量: $(ls $GITHUB_WORKSPACE/firmware/ | wc -l)"

    - name: Display disk space before creating PR
      run: |
        echo "磁盘空间信息 (创建PR前):"
        df -h
        du -sh ~/*

    - name: Create Pull Request with changes
      if: ${{ steps.compile.outcome == 'success' }}
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: update-firmware
        title: "Update firmware binaries"
        body: |
          自动更新固件二进制文件
          构建版本: ${{ env.PACKAGED_OUTPUTDATE }}
        commit-message: "Update firmware: ${{ env.PACKAGED_OUTPUTDATE }}"
        path: firmware/

    - name: Display disk space after build
      if: always()
      run: |
        echo "磁盘空间信息 (构建完成后):"
        df -h
        du -sh ~/*
