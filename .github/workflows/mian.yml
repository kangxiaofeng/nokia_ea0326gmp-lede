name: Build LEDE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Generate Date
      id: date
      run: |
        DATE=$(date +'%Y%m%d-%H%M')
        echo "PACKAGED_OUTPUTDATE=${{ github.run_id }}_$DATE" >> $GITHUB_ENV

    - name: Display disk space before build
      run: |
        df -h
        du -sh ~/*

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          lede/ccache
          lede/dl
        key: ${{ runner.os }}-lede-${{ hashFiles('.config') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-lede-${{ hashFiles('.config') }}-

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
          gettext genisoimage git gperf help2man intltool libc6-dev-i386 libelf-dev \
          libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev jq zstd libzstd-dev
        
        # 清理 apt 缓存以节省空间
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    - name: Prepare build environment
      run: |
        git clone https://github.com/coolsnowwolf/lede.git lede
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp $GITHUB_WORKSPACE/.config .
        make defconfig

    - name: Compile LEDE with disk space optimization
      id: compile
      run: |
        cd lede
        
        # 配置ccache并限制大小
        echo "export USE_CCACHE=1" >> ~/.bashrc
        echo "export CCACHE_MAXSIZE=300M" >> ~/.bashrc  # 减小ccache最大大小
        echo "export CCACHE_DIR=$(pwd)/ccache" >> ~/.bashrc
        source ~/.bashrc
        ccache -z
        
        # 编译过程中定期清理临时文件
        mkdir -p temp_dir
        make -j$(nproc) V=s || (
          echo "Compilation failed, trying with reduced parallelism and cleaning up..."
          # 清理临时文件
          find . -name "*.o" -exec rm -f {} \;
          find . -name "*.d" -exec rm -f {} \;
          make -j1 V=s
        )
        
        # 清理编译过程中产生的不必要文件
        make clean
        
        # 显示ccache统计信息和磁盘使用情况
        ccache -s
        df -h
        du -sh *

    - name: Collect firmware files
      if: success() || failure()
      run: |
        mkdir -p firmware
        find lede/bin/targets/ -name "*.bin" -exec cp {} firmware/ \;
        find lede/bin/targets/ -name "*.img.gz" -exec cp {} firmware/ \;  # 也收集gz压缩的镜像
        ls -la firmware/

    - name: Create Pull Request with changes
      if: ${{ steps.compile.outcome == 'success' }}
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: update-firmware
        title: "Update firmware binaries"
        body: |
          自动更新固件二进制文件
          构建版本: ${{ env.PACKAGED_OUTPUTDATE }}
        commit-message: "Update firmware: ${{ env.PACKAGED_OUTPUTDATE }}"
        path: firmware/

    - name: Display disk space after build
      if: always()
      run: |
        df -h
        du -sh ~/*
