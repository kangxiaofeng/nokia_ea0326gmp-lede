name: Build LEDE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PACKAGED_OUTPUTDATE: ${{ github.run_id }}_$(date +'%Y%m%d-%H%M')
  TARGET_DEVICE: "nokia_ea0326gmp"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    # --- 步骤 1: 检出代码 ---
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # --- 步骤 2: 缓存依赖 ---
    - name: Cache lede source
      uses: actions/cache@v3
      id: lede-cache
      with:
        paths:
          - lede/
        key: ${{ runner.os }}-lede-${{ github.sha }}

    # --- 步骤 3: 安装编译依赖 ---
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
          gettext genisoimage git gperf help2man intltool libc6-dev-i386 libelf-dev \
          libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev jq zstd libzstd-dev

    # --- 步骤 4: 准备编译环境 ---
    - name: Prepare build environment
      run: |
        mkdir -p lede
        cd lede
        if [ -d lede ]; then
          echo "缓存已存在，跳过克隆"
        else
          git clone https://github.com/coolsnowwolf/lede.git lede
        fi
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp $GITHUB_WORKSPACE/.config .
        make defconfig

    # --- 步骤 5: 编译固件 ---
    - name: Compile LEDE
      id: compile
      run: |
        cd lede
        if ! make -j$(nproc); then
          echo "使用 $(nproc) 个线程编译失败，尝试使用单线程..."
          if ! make -j1; then
            echo "单线程编译失败，再次尝试单线程编译..."
            if ! make -j1 V=s; then
              echo "所有编译尝试都失败，请检查错误日志..."
              exit 1
            fi
          fi
        fi
        echo "compile_status=success" >> $GITHUB_OUTPUT

    # --- 步骤 6: 上传到 Release ---
    - name: Upload to Release
      if: steps.compile.outputs.compile_status == 'success'
      uses: ncipollo/release-action@v1
      with:
        tag: OpenWrt_${{ env.TARGET_DEVICE }}_${{ env.PACKAGED_OUTPUTDATE }}
        artifacts: "lede/bin/targets/*/*/*.bin"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ### 基于 Lean 的 LEDE 源码构建
          **首次使用建议全新刷写**
          
          **基本信息**
          - 管理 IP: 192.168.1.1
          - 用户名: root
          - 密码: password
          - 设备型号: ${{ env.TARGET_DEVICE }}
